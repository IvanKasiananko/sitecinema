from cProfile import label
from email.policy import default

from django import forms
from django.db.models import TextField, CharField
from django.forms import modelformset_factory, inlineformset_factory
from django.templatetags.i18n import language
from pygame.cursors import sizer_y_strings

from cinema import models
from cinema.models import Image, Banner, User, BannerFon, Film, Seo, Cinema, About, Hall, Newsletter, Session

TYPE_CHOICES = [
    ('2D', '2D'),
    ('3D', '3D'),
    ('IMAX', 'IMAX'),
]

class CinemaAdressForm(forms.ModelForm):
    class Meta:
        model = Cinema
        fields = ['name_cinema', 'adress', 'coord', 'logo']
        labels = {
            'name_cinema': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞',
            'adress': '–ê–¥—Ä–µ—Å',
            'coord': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã',
            'logo': '–õ–æ–≥–æ',
        }
        # widgets = {
        #     'adress': forms.Textarea(attrs={'placeholder': '–ê–¥—Ä–µ—Å'}),
        #     'coord': forms.TextInput(attrs={'placeholder': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã'}),
        # }
        widgets = {
            'name_cinema': forms.TextInput(attrs={
                'style': 'width:400px;',  # –∑–∞–¥–∞—ë—Ç —à–∏—Ä–∏–Ω—É
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                # 'class': 'my-input',  # –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è CSS
            }),
            'adress': forms.Textarea(attrs={
                'style': 'width:800px; height:100px;',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å',
                # 'class': 'my-textarea',
            }),
            'coord': forms.TextInput(attrs={
                'style': 'width:400px;',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã',
                # 'class': 'my-input',
            }),
        }


class CinemaForm(forms.ModelForm):
    class Meta:
        model = Cinema
        fields = ['logo', 'name_cinema']

class CinemaAddForm(forms.ModelForm):
    language = forms.ChoiceField(  # —ç—Ç–æ –ø–æ–ª–µ –ù–ï –≤ –º–æ–¥–µ–ª–∏
        choices=[('ru', '–†—É—Å—Å–∫–∏–π'), ('uk', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞')],
        widget=forms.RadioSelect,
        required=False,
        initial='uk',
    )

    class Meta:
        model=Cinema
        fields = [
            'name_cinema_uk',
            'name_cinema_ru',
            'seo_text_uk',
            'seo_text_ru',
            'conditions_uk',
            'conditions_ru',
            'logo',
            'banner',
            'adress',
            'coord',
        ]
        widgets = {
            'seo_text_uk': forms.Textarea(attrs={'rows': 3}),
            'seo_text_ru': forms.Textarea(attrs={'rows': 3}),
            'conditions_uk': forms.Textarea(attrs={'rows': 3}),
            'conditions_ru': forms.Textarea(attrs={'rows': 3}),
            'logo': forms.FileInput(attrs={'class': 'hidden-input'}),
            'banner': forms.FileInput(attrs={'class': 'hidden-input'}),

        }


class AboutForm(forms.ModelForm):
    class Meta:
        model = About
        exclude = ['cinema', 'seo', 'gall']


class FilmForm(forms.ModelForm):
    class Meta:
        model = Film
        fields = ['main_image', 'name']

class HallAddForm(forms.ModelForm):
    language = forms.ChoiceField(  # —ç—Ç–æ –ø–æ–ª–µ –ù–ï –≤ –º–æ–¥–µ–ª–∏
        choices=[('ru', '–†—É—Å—Å–∫–∏–π'), ('uk', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞')],
        widget=forms.RadioSelect,
        required=False,
        initial='uk',

    )
    class Meta:
        model=Hall
        fields=[
            'name_hall_uk',
            'name_hall_ru',
            'description_uk',
            'description_ru',
            'sheme',
            'banner',
        ]
        widgets = {
            'description_uk': forms.Textarea(attrs={'rows': 3}),
            'description_ru': forms.Textarea(attrs={'rows': 3}),
            'sheme': forms.FileInput(attrs={'class': 'hidden-input'}),
            'banner': forms.FileInput(attrs={'class': 'hidden-input'}),

        }

class SMSForm(forms.Form):
    sms_all_user = forms.ChoiceField(choices=[('all', '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'), ('choice', '–í—ã–±—Ä–∞–Ω–Ω—ã–µ')],
                                     widget=forms.RadioSelect)

    text_sms = forms.CharField(
        widget=forms.Textarea(attrs={
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç SMS',
            'rows': 4,
            'style': 'width: 300px;',
            'class': 'form-control',
        }),
        label='–¢–µ–∫—Å—Ç SMS',
        required=True,
    )

class EmailForm(forms.Form):
    email_all_user = forms.ChoiceField(
        choices=[('all', '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'), ('choice', '–í—ã–±—Ä–∞–Ω–Ω—ã–µ')],
        widget=forms.RadioSelect
    )
    selected_template = forms.IntegerField(required=True)

class FilmAddForm(forms.ModelForm):
    # –¢–∏–ø —Ç—É—Ç

    type_film = forms.MultipleChoiceField(
        choices=TYPE_CHOICES,
        widget=forms.CheckboxSelectMultiple,
        required=False,
        label='–¢–∏–ø'
    )

    class Meta:
        model = Film
        fields = [
            'language',      # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
            'name_uk',       # –Ø–∑—ã–∫–æ–≤—ã–µ –ø–æ–ª—è, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ modeltranslation
            'name_ru',
            'description_uk',
            'description_ru',
            'main_image',
            'treiler_url',
            'start_date',
            'type_film',
        ]
        widgets = {
            'description_uk': forms.Textarea(attrs={'rows': 3}),
            'description_ru': forms.Textarea(attrs={'rows': 3}),
            'start_date': forms.DateInput(attrs={'type': 'date'}),
            'language': forms.RadioSelect,
            'main_image': forms.FileInput(attrs={'class': 'hidden-input'}),

        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—è MultipleChoiceField
        if self.instance and self.instance.pk and self.instance.type_film:
            self.initial['type_film'] = self.instance.type_film.split(',')

    def clean_type_film(self):
        data = self.cleaned_data.get('type_film')
        return ','.join(data) if data else ''


class SessionForm(forms.ModelForm):
    type_film = forms.ChoiceField(choices=TYPE_CHOICES, label='–¢–∏–ø —Ñ–∏–ª—å–º–∞')

    cinema = forms.ModelChoiceField(
        queryset=Cinema.objects.all(),
        label='–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
        required=True
    )

    class Meta:
        model = Session
        fields = ['film', 'type_film', 'cinema', 'hall', 'price', 'date_session', 'time_session']
        widgets = {
            'date_session': forms.DateInput(attrs={'type': 'date'}),
            'time_session': forms.TimeInput(attrs={'type': 'time'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # üî∑ –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–ª–æ–≤ –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ–±—â–∏–π
        self.fields['hall'].queryset = Hall.objects.none()

        if 'cinema' in self.data:
            try:
                cinema_id = int(self.data.get('cinema'))
                self.fields['hall'].queryset = Hall.objects.filter(cinema_id=cinema_id).order_by('name_hall_uk')
            except (ValueError, TypeError):
                pass  # invalid input; ignore and fallback to empty
        elif self.instance.pk:
            self.fields['hall'].queryset = self.instance.cinema.hall_set.order_by('name_hall_uk')


class NewsActionAddForm(forms.ModelForm):
    LANGUAGE_CHOICES = [
        ('uk', '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'),
        ('ru', '–†—É—Å—Å–∫–∏–π'),
    ]
    language = forms.ChoiceField(
        choices=LANGUAGE_CHOICES,
        widget=forms.RadioSelect,
        required=True,
        label='–ú–æ—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∞',
        initial='uk',
    )

    class Meta:
        model = About
        fields = [
            'name',
            'publication',
            'date_publication',
            'name_about_uk',
            'name_about_ru',
            'description_uk',
            'description_ru',
            'main_image',
            'video_url',
            'cinema',
        ]
        widgets = {
            'description_uk': forms.Textarea(attrs={'rows': 3}),
            'description_ru': forms.Textarea(attrs={'rows': 3}),
            'date_publication': forms.DateInput(
                attrs={'type': 'date'},
                format='%Y-%m-%d'
            ),
            'main_image': forms.FileInput(attrs={'class': 'hidden-input'}),

        }
        # exclude = ['cinema', 'seo', 'gall']






class ImageForm(forms.ModelForm):
    class Meta:
        model = Image
        fields = ['image']
        widgets = {
            'image': forms.FileInput(attrs={'class': 'hidden-input'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['image'].required = False


ImageFormSet = modelformset_factory(
    Image,
    form=ImageForm,
    extra=5,
    can_delete=True
)


class SeoForm(forms.ModelForm):
    class Meta:
        model = Seo
        fields = ['seo_url', 'seo_title', 'seo_keywords', 'seo_description']
        labels = {
            'seo_url': 'URL',
            'seo_title': 'Title',
            'seo_keywords': 'Keyword',
            'seo_description': 'Description',
        }


class BannerForm(forms.ModelForm):
    class Meta:
        model = Banner
        fields = ['image_main', 'url_banner', 'text_banner']
        widgets = {
            'image_main': forms.FileInput(attrs={'accept': 'image/*'}),
            'url_banner': forms.URLInput(attrs={'class': 'small-input'}),
            'text_banner': forms.TextInput(attrs={'class': 'small-input'}),

        }


BannerFormSetMain = modelformset_factory(
    Banner, form=BannerForm, extra=1, can_delete=True
)

BannerFormSetAction = modelformset_factory(
    Banner, form=BannerForm, extra=1, can_delete=True
)


class BannerFonForm(forms.ModelForm):
    class Meta:
        model = BannerFon
        fields = ['image_back', 'fon']
        widgets = {
            'fon': forms.RadioSelect(choices=[(True, '–§–æ—Ç–æ –Ω–∞ —Ñ–æ–Ω'), (False, '–ü—Ä–æ—Å—Ç–æ —Ñ–æ–Ω')]),
        }


class UserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['id', 'first_name', 'last_name', 'username', 'email', 'adress', 'password', 'card_user',
                  'language', 'sex', 'phone_user', 'birthday', 'town']
        labels = {
            'first_name': '–ò–º—è',
            "last_name": '–§–∞–º–∏–ª–∏—è',
            'username': '–ü—Å–µ–≤–¥–æ–Ω–∏–º',
            'adress': '–ê–¥—Ä–µ—Å—Å',
            'password': '–ü–∞—Ä–æ–ª—å',
            'card_user': '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
            'language': '–Ø–∑—ã–∫',
            'sex': '–ü–æ–ª',
            'phone_user': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'birthday': '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
            'town': '–ì–æ—Ä–æ–¥',
        }

class Session(forms.ModelForm):

    class Meta:
        model=Session
        fields='__all__'

class UserAddForm(forms.ModelForm):
    CHOICES_SEX = (
        ("men", '–ú—É–∂—Å–∫–æ–π'),
        ("women", '–ñ–µ–Ω—Å–∫–∏–π'),
    )

    LANGUAGE_CHOICES = (
        (1, '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'),
        (2, '–†—É—Å—Å–∫–∏–π'),
    )

    TOWN_CHOICES = [
        ('kiev', '–ö–∏–µ–≤'),
        ('odessa', '–û–¥–µ—Å—Å–∞'),
        ('lviv', '–õ—å–≤–æ–≤'),
        ('donetsk', '–î–æ–Ω–µ—Ü–∫'),
        ('harkiv', '–•–∞—Ä—å–∫–æ–≤'),
    ]

    sex = forms.ChoiceField(choices=CHOICES_SEX, widget=forms.RadioSelect)
    language = forms.ChoiceField(choices=LANGUAGE_CHOICES, widget=forms.RadioSelect)
    town = forms.ChoiceField(choices=TOWN_CHOICES, widget=forms.Select, required=False)
    card_user = forms.CharField(max_length=19, widget=forms.TextInput(attrs={'placeholder': '**** **** **** ****'}))
    password = forms.CharField(
        widget=forms.PasswordInput(attrs={'placeholder': '–ü–∞—Ä–æ–ª—å'}),
        label="–ü–∞—Ä–æ–ª—å"
    )
    confirm_password = forms.CharField(
        widget=forms.PasswordInput(attrs={'placeholder': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}),
        label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
    )

    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'username', 'email', 'adress', 'password', 'card_user',
                  'language', 'sex', 'phone_user', 'birthday', 'town']

        widgets = {
            'birthday': forms.SelectDateWidget(years=range(1900, 2025)),
            'password': forms.PasswordInput(),
        }

        labels = {
            'first_name': '–ò–º—è',
            'last_name': '–§–∞–º–∏–ª–∏—è',
            'username': '–ü—Å–µ–≤–¥–æ–Ω–∏–º',
            'adress': '–ê–¥—Ä–µ—Å',
            'password': '–ü–∞—Ä–æ–ª—å',
            'card_user': '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
            'language': '–Ø–∑—ã–∫',
            'sex': '–ü–æ–ª',
            'phone_user': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'birthday': '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
            'town': '–ì–æ—Ä–æ–¥',
        }

    def clean_confirm_password(self):
        password = self.cleaned_data.get('password')
        confirm_password = self.cleaned_data.get('confirm_password')
        if password != confirm_password:
            raise forms.ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return confirm_password

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data['password'])
        if commit:
            user.save()
        return user

