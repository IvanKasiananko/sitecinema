# Generated by Django 5.1.7 on 2025-04-21 21:57

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Baner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_page', models.CharField(max_length=100)),
                ('image_main', models.ImageField(upload_to='photos/')),
                ('url_baner', models.URLField()),
                ('text_baner', models.CharField(max_length=150)),
                ('speed', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Banerfon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_back', models.ImageField(upload_to='photos/')),
                ('fon', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price1', models.FloatField(max_length=10)),
                ('price2', models.FloatField(max_length=10)),
                ('vip_price', models.FloatField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Seo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seo_url', models.URLField()),
                ('seo_title', models.CharField(max_length=100)),
                ('seo_keywords', models.CharField(max_length=100)),
                ('seo_description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('registration_date', models.DateField()),
                ('town', models.CharField(max_length=100)),
                ('adress', models.CharField(max_length=200)),
                ('phone_user', models.SlugField(max_length=15)),
                ('card_user', models.SlugField(max_length=20)),
                ('birthday', models.DateField()),
                ('sex', models.CharField(max_length=10)),
                ('language', models.CharField(max_length=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Hall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_hall', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('sheme', models.ImageField(upload_to='photos/')),
                ('baner', models.ImageField(upload_to='photos/')),
                ('row', models.PositiveIntegerField()),
                ('col', models.PositiveIntegerField()),
                ('gall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.gallery')),
                ('seo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.seo')),
            ],
        ),
        migrations.CreateModel(
            name='Cinema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_cinema', models.CharField(max_length=100)),
                ('phone_num1', models.SlugField(max_length=15)),
                ('phone_num2', models.SlugField(max_length=15)),
                ('seo_text', models.TextField()),
                ('adress', models.TextField()),
                ('coord', models.URLField()),
                ('logo', models.ImageField(upload_to='photos/')),
                ('hall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.hall')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='photos/')),
                ('gall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.gallery')),
            ],
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField()),
                ('main_image', models.ImageField(upload_to='photos/')),
                ('treiler_url', models.URLField()),
                ('start_date', models.DateField()),
                ('type_film', models.BinaryField()),
                ('gall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.gallery')),
                ('seo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.seo')),
            ],
        ),
        migrations.CreateModel(
            name='About',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_about', models.CharField(max_length=100)),
                ('date_create', models.DateTimeField()),
                ('description', models.TextField()),
                ('main_image', models.ImageField(upload_to='photos/')),
                ('video_url', models.URLField()),
                ('cinema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.cinema')),
                ('gall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.gallery')),
                ('seo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.seo')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_session', models.DateField()),
                ('time_session', models.TimeField()),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.film')),
                ('gall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.gallery')),
                ('seo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.seo')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.PositiveIntegerField()),
                ('place', models.PositiveIntegerField()),
                ('booking', models.BooleanField(default=False)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.session')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
